{"version":3,"sources":["../../../src/@ionic-native/plugins/themeable-browser/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,eAAA,EAAiB,aAAA,EAAe,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAC/F,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAmE7C;;GAEG;AACH;IAIE,gCAAY,GAAW,EAAE,MAAc,EAAE,YAAqC;QAC5E,IAAI,CAAC;YACH,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;QAClF,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,CAAC,IAAI,CAAC,yGAAyG,CAAC,CAAC;QAC1H,CAAC;IACH,CAAC;IAED;;;OAGG;IAEH,qCAAI,GAAJ,cAAe,CAAC;IAEhB;;OAEG;IAEH,sCAAK,GAAL,cAAgB,CAAC;IAEjB;;OAEG;IAEH,uCAAM,GAAN,cAAiB,CAAC;IAElB;;;;OAIG;IAEH,8CAAa,GAAb,UAAc,MAAwC,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEjF;;;;OAIG;IAEH,0CAAS,GAAT,UAAU,GAAqC,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE1E;;;;;OAKG;IAEH,mCAAE,GAAF,UAAG,KAAa;QADhB,iBAMC;QAJC,MAAM,CAAC,IAAI,UAAU,CAAM,UAAC,QAAQ;YAClC,KAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC3E,MAAM,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAA7E,CAA6E,CAAC;QAC7F,CAAC,CAAC,CAAC;IACL,CAAC;IAEH,6BAAC;AAAD,CA9DA,AA8DC,IAAA;;AA5CC;IADC,eAAe,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;kDAChB;AAMhB;IADC,eAAe,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;mDACf;AAMjB;IADC,eAAe,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;oDACd;AAQlB;IADC,eAAe,EAAE;;;;2DAC+D;AAQjF;IADC,eAAe,EAAE;;;;uDACwD;AAS1E;IADC,aAAa,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;;;oCACjB,UAAU;gDAK5B;AAIH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoFG;AASH,IAAa,gBAAgB;IAAS,oCAAiB;IAAvD;;IAmBA,CAAC;IAjBC;;;;;;OAMG;IACH,iCAAM,GAAN,UAAO,GAAW,EAAE,MAAc,EAAE,YAAqC;QACvE,MAAM,CAAC,IAAI,sBAAsB,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;IAC/D,CAAC;IAQH,uBAAC;AAAD,CAnBA,AAmBC,CAnBqC,iBAAiB,GAmBtD;AANM,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,+BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAlBW,gBAAgB;IAR5B,MAAM,CAAC;QACN,UAAU,EAAE,kBAAkB;QAC9B,MAAM,EAAE,iCAAiC;QACzC,SAAS,EAAE,0BAA0B;QACrC,IAAI,EAAE,8DAA8D;QACpE,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC;KAC/H,CAAC;GAEW,gBAAgB,CAmB5B;SAnBY,gBAAgB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, CordovaInstance, InstanceCheck, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\ndeclare var cordova: any;\r\n\r\nexport interface ThemeableBrowserButton {\r\n  wwwImage?: string;\r\n  image?: string;\r\n  wwwImagePressed?: string;\r\n  imagePressed?: string;\r\n  wwwImageDensity?: number;\r\n  align?: string;\r\n  event?: string;\r\n}\r\n\r\nexport interface ThemeableBrowserOptions {\r\n  statusbar?: {\r\n    color: string;\r\n  };\r\n  toolbar?: {\r\n    height?: number;\r\n    color?: string;\r\n    image?: string;\r\n  };\r\n  title?: {\r\n    color?: string;\r\n    staticText?: string;\r\n    showPageTitle?: boolean;\r\n  };\r\n  backButton?: ThemeableBrowserButton;\r\n  forwardButton?: ThemeableBrowserButton;\r\n  closeButton?: ThemeableBrowserButton;\r\n  customButtons?: ThemeableBrowserButton[];\r\n  menu?: {\r\n    image?: string;\r\n    imagePressed?: string;\r\n    title?: string;\r\n    cancel?: string;\r\n    align?: string;\r\n    items?: {\r\n      event: string;\r\n      label: string;\r\n    }[];\r\n  };\r\n  backButtonCanClose?: boolean;\r\n  disableAnimation?: boolean;\r\n\r\n  // inAppBrowser options\r\n  location?: string;\r\n  hidden?: string;\r\n  clearcache?: string;\r\n  clearsessioncache?: string;\r\n  zoom?: string;\r\n  hardwareback?: string;\r\n  mediaPlaybackRequiresUserAction?: string;\r\n  shouldPauseOnSuspsend?: string;\r\n  closebuttoncaption?: string;\r\n  disallowoverscroll?: string;\r\n  enableViewportScale?: string;\r\n  allowInlineMediaPlayback?: string;\r\n  keyboardDisplayRequiresUserAction?: string;\r\n  suppressesIncrementalRendering?: string;\r\n  presentationstyle?: string;\r\n  transitionstyle?: string;\r\n  toolbarposition?: string;\r\n  fullscreen?: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class ThemeableBrowserObject {\r\n\r\n  private _objectInstance: any;\r\n\r\n  constructor(url: string, target: string, styleOptions: ThemeableBrowserOptions) {\r\n    try {\r\n      this._objectInstance = cordova.ThemeableBrowser.open(url, target, styleOptions);\r\n    } catch (e) {\r\n      window.open(url);\r\n      console.warn('Native: ThemeableBrowser is not installed or you are running on a browser. Falling back to window.open.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Displays an browser window that was opened hidden. Calling this has no effect\r\n   * if the browser was already visible.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  show(): void { }\r\n\r\n  /**\r\n   * Closes the browser window.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  close(): void { }\r\n\r\n  /**\r\n   * Reloads the current page\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  reload(): void { }\r\n\r\n  /**\r\n   * Injects JavaScript code into the browser window.\r\n   * @param script    Details of the script to run, specifying either a file or code key.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  executeScript(script: { file?: string, code?: string }): Promise<any> { return; }\r\n\r\n  /**\r\n   * Injects CSS into the browser window.\r\n   * @param css       Details of the script to run, specifying either a file or code key.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  insertCss(css: { file?: string, code?: string }): Promise<any> { return; }\r\n\r\n  /**\r\n   * A method that allows you to listen to events happening in the browser.\r\n   * Available events are: `ThemeableBrowserError`, `ThemeableBrowserWarning`, `critical`, `loadfail`, `unexpected`, `undefined`\r\n   * @param event Event name\r\n   * @returns {Observable<any>} Returns back an observable that will listen to the event on subscribe, and will stop listening to the event on unsubscribe.\r\n   */\r\n  @InstanceCheck({ observable: true })\r\n  on(event: string): Observable<any> {\r\n    return new Observable<any>((observer) => {\r\n      this._objectInstance.addEventListener(event, observer.next.bind(observer));\r\n      return () => this._objectInstance.removeEventListener(event, observer.next.bind(observer));\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @name Themeable Browser\r\n * @description\r\n * In-app browser that allows styling.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { ThemeableBrowser, ThemeableBrowserOptions, ThemeableBrowserObject } from '@ionic-native/themeable-browser';\r\n *\r\n * constructor(private themeableBrowser: ThemeableBrowser) { }\r\n *\r\n * ...\r\n *\r\n * // can add options from the original InAppBrowser in a JavaScript object form (not string)\r\n * // This options object also takes additional parameters introduced by the ThemeableBrowser plugin\r\n * // This example only shows the additional parameters for ThemeableBrowser\r\n * // Note that that `image` and `imagePressed` values refer to resources that are stored in your app\r\n * const options: ThemeableBrowserOptions = {\r\n *      statusbar: {\r\n *          color: '#ffffffff'\r\n *      },\r\n *      toolbar: {\r\n *          height: 44,\r\n *          color: '#f0f0f0ff'\r\n *      },\r\n *      title: {\r\n *          color: '#003264ff',\r\n *          showPageTitle: true\r\n *      },\r\n *      backButton: {\r\n *          image: 'back',\r\n *          imagePressed: 'back_pressed',\r\n *          align: 'left',\r\n *          event: 'backPressed'\r\n *      },\r\n *      forwardButton: {\r\n *          image: 'forward',\r\n *          imagePressed: 'forward_pressed',\r\n *          align: 'left',\r\n *          event: 'forwardPressed'\r\n *      },\r\n *      closeButton: {\r\n *          image: 'close',\r\n *          imagePressed: 'close_pressed',\r\n *          align: 'left',\r\n *          event: 'closePressed'\r\n *      },\r\n *      customButtons: [\r\n *          {\r\n *              image: 'share',\r\n *              imagePressed: 'share_pressed',\r\n *              align: 'right',\r\n *              event: 'sharePressed'\r\n *          }\r\n *      ],\r\n *      menu: {\r\n *          image: 'menu',\r\n *          imagePressed: 'menu_pressed',\r\n *          title: 'Test',\r\n *          cancel: 'Cancel',\r\n *          align: 'right',\r\n *          items: [\r\n *              {\r\n *                  event: 'helloPressed',\r\n *                  label: 'Hello World!'\r\n *              },\r\n *              {\r\n *                  event: 'testPressed',\r\n *                  label: 'Test!'\r\n *              }\r\n *          ]\r\n *      },\r\n *      backButtonCanClose: true\r\n * };\r\n *\r\n * const browser: ThemeableBrowserObject = this.themeableBrowser.create('https://ionic.io', '_blank', options);\r\n *\r\n * ```\r\n * We suggest that you refer to the plugin's repository for additional information on usage that may not be covered here.\r\n * @classes\r\n * ThemeableBrowserObject\r\n * @interfaces\r\n * ThemeableBrowserButton\r\n * ThemeableBrowserOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'ThemeableBrowser',\r\n  plugin: 'cordova-plugin-themeablebrowser',\r\n  pluginRef: 'cordova.ThemeableBrowser',\r\n  repo: 'https://github.com/initialxy/cordova-plugin-themeablebrowser',\r\n  platforms: ['Amazon Fire OS', 'Android', 'Blackberry 10', 'Browser', 'FirefoxOS', 'iOS', 'Ubuntu', 'Windows', 'Windows Phone']\r\n})\r\n\r\nexport class ThemeableBrowser extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Creates a browser instance\r\n   * @param url {string} URL to open\r\n   * @param target {string} Target\r\n   * @param styleOptions {ThemeableBrowserOptions} Themeable browser options\r\n   * @returns {ThemeableBrowserObject}\r\n   */\r\n  create(url: string, target: string, styleOptions: ThemeableBrowserOptions): ThemeableBrowserObject {\r\n    return new ThemeableBrowserObject(url, target, styleOptions);\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}